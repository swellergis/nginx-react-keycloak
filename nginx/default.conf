upstream client {
  server client:3000;
}

upstream server {
  server server:8000;
}

upstream keycloak_service {
    server keycloak-app:8080;
}

server {
    listen 80 default_server;
    server_name foo.local;
    return 301 https://foo.local$request_uri;
}

server {
    listen 443 ssl;

    # /etc/hosts needs an entry for 127.0.0.1 foo.local (or you'll get a 502 bad gateway)
    server_name foo.local;

    ssl_certificate /etc/ssl/certs/dev-nginx-tls-crt.pem;
    ssl_certificate_key /etc/ssl/private/dev-nginx-tls-key.pem;

    access_log   /var/log/nginx/foo.access.log;
    error_log    /var/log/nginx/foo.error.log;

    location / {
        proxy_pass http://client/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location /api/ {
        proxy_pass http://server/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}

server {
    listen 443 ssl;

    server_name keycloak.local;

    ssl_certificate /etc/ssl/certs/dev-nginx-tls-crt.pem;
    ssl_certificate_key /etc/ssl/private/dev-nginx-tls-key.pem;

    access_log   /var/log/nginx/keycloak.access.log;
    error_log    /var/log/nginx/keycloak.error.log;

    # a location to proxy requests to the upstream keycloak_service
    location / {
        proxy_pass http://keycloak_service;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # logging for access to the proxy
        access_log /var/log/nginx/keycloak.proxy.access.log;
        error_log /var/log/nginx/keycloak.proxy.error.log;
    }
}
